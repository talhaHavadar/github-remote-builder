#!/bin/bash

CONFIG_PATH="${XDG_CONFIG_HOME:-"$HOME/.config"}/gh-remote-builder"

if ! command -v gh &> /dev/null; then
    echo "This tool requires Github CLI tool to be installed please first install Github CLI and then try to run gh-remote-builder"
fi

function usage()
{
    cat << EOF
gh-remote-builder [options] [commands]

Example usage:
    gh-remote-builder --arch=amd64 --target-files="target/debian;target/release" --out=download
        starts a remote build for amd64 architecture, using current repo and 
        branch information, it will use the scripts defined in '.gh-remote-builder' directory
            - prebuild
            - build
            - target-files (overridden by --target-files)
        after build is finished it packs the files listed 
        in --target-files and downloads the artifacts into 'download' folder as
        specified in --out

    gh-remote-builder --target-repo="Badger-Embedded/badgerd-sdwirec" --target-ref=main
        starts a remote build for amd64(by default) architecture, using
        'Badger-Embedded/badgerd-sdwirec' repo and 'main' branch, it will use
        use scripts defined in '.gh-remote-builder' directory
            - prebuild
            - build
            - target-files
        after build finished it packs the files listed in .gh-remote-builder/target-files
        and downloads the artifacts into 'target'(by default) folder

options:
    --help                          Prints out this message

    --arch=<value>                  default: amd64

    --target-repo=<value>           default: uses current github repo in the directory that the tool has been run

    --target-ref=<value>            default: uses the active branch of the repo that the tool has been run

    --prebuild-command=<value>      default: uses .gh-remote-builder/prebuild file as source
                                    Commands that will run before build starts,
                                    it is a nice place to install dependencies

    --build-command=<value>         default: uses .gh-remote-builder/build file as source
                                    Actual build command that will be executed
                                    in build phase. A good example could be "cargo deb"

    --target-files=<value>          default: uses .gh-remote-builder/target-files as source
                                    File/Directory paths to be tarballed. Multiple
                                    path can be provided by using ';' as delimiter
    --out=<value>

commands:
    init                            Initialises the gh-remote-builder
                                    it creates initial config file if it is not created yet
                                    creates the directory structure for .gh-remote-builder directory
                                    adds .gh-remote-builder into .gitignore if there is a .gitignore in cwd
EOF
}

current_repo=$(git remote -v | grep github | head -1 | sed 's/.*://' | sed 's/\.git.*//')
current_branch=$(git branch | grep '*' | sed 's/.*\s//')

for i in "$@"; do
    case "$i" in
        --help)
            usage
            exit
            ;;
        --arch=*)
            ARCH="${1#*=}"
            shift
            ;;
        --target-repo=*)
            TARGET_REPO="${1#*=}"
            shift
            ;;
        --target-ref=*)
            TARGET_REF="${1#*=}"
            shift
            ;;
        --prebuild-command=*)
            PREBUILD_COMMAND="${1#*=}"
            shift
            ;;
        --build-command=*)
            BUILD_COMMAND="${1#*=}"
            shift
            ;;
        --target-files=*)
            TARGET_FILES="${1#*=}"
            shift
            ;;
        --out=*)
            DOWNLOAD_DIR="${1#*=}"
            shift
            ;;
        -*|--*)
            echo "ERROR: unknown option $1"
            usage
            exit 1
            ;;
        *)
            ;;
    esac
done

if [[ -n $1 ]]; then
    COMMAND="$1"
fi

if [[ "$COMMAND" == "init" ]]; then
    gh auth status &> /dev/null

    if [ ! $? -eq 0 ]; then
        gh auth login
    fi

    if [ ! -f "$CONFIG_PATH"/config ]; then
        read -p "Enter repo name of builder: [default: talhaHavadar/github-remote-builder] " REPO
        REPO=${REPO:-talhaHavadar/github-remote-builder}
        mkdir -p "$CONFIG_PATH"
        echo "REPO=\"$REPO\"" > "$CONFIG_PATH"/config
    fi

    # check if the .gh-remote-builder exists if not create it
    if [[ ! -d ".gh-remote-builder" ]]; then
        echo "Creating .gh-remote-builder in $(pwd)"
        if [[ -f ".gitignore" ]]; then
            echo ".gh-remote-builder/" >> .gitignore
        fi
        mkdir .gh-remote-builder
        touch .gh-remote-builder/prebuild
        touch .gh-remote-builder/build
        touch .gh-remote-builder/target-files
    fi
    cat << EOF

Update the content of the files below as required to build and
collect the results of the build:
    .gh-remote-builder/prebuild     --> will be executed before build, 
                                        it is a good place to install dependencies
    .gh-remote-builder/build        --> will be executed during build phase, it is 
                                        a good place to put build commands 
                                        (such as 'cargo build')
    .gh-remote-builder/target-files --> paths of the files (relative to root 
                                        of target repo) that needs to be downloaded 
                                        (seperated by ';') (Example: 'target/debian;target/release')

EOF
    echo "Initialisation is completed.. Please see 'gh-remote-builder --help' for usage details"
    exit 0
fi

source "$CONFIG_PATH"/config

ARCH=${ARCH:-amd64}
TARGET_REPO=${TARGET_REPO:-$current_repo}
TARGET_REF=${TARGET_REF:-$current_branch}
PREBUILD_COMMAND=${PREBUILD_COMMAND:-$(cat .gh-remote-builder/prebuild)}
BUILD_COMMAND=${BUILD_COMMAND:-$(cat .gh-remote-builder/build)}
TARGET_FILES=$(sed 's/;/ /g' <<< ${TARGET_FILES:-$(cat .gh-remote-builder/target-files)})
DOWNLOAD_DIR=${DOWNLOAD_DIR:-"target"}

gh workflow run -R $REPO \
    $ARCH-build.yaml \
    -f target_repo="$TARGET_REPO" \
    -f target_ref="$TARGET_REF" \
    -f prebuild_command="$PREBUILD_COMMAND" \
    -f build_command="$BUILD_COMMAND" \
    -f target_files="$TARGET_FILES"

sleep 4s

run_id=$(gh run -R talhaHavadar/github-remote-builder list --workflow "$ARCH"-build.yaml | head -1 | awk -v FS='\t' '{ print $7}')

gh run -R talhaHavadar/github-remote-builder watch $run_id && \
    gh run -R talhaHavadar/github-remote-builder download $run_id -D "$DOWNLOAD_DIR" && \
    gh run -R talhaHavadar/github-remote-builder delete $run_id
